name: CI configuration

on:
  workflow_dispatch:
  push:
    branches:
      - main

  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  id-token: write
  contents: read
env:
  TAG: ${{ github.sha }}
  GCP_REGION: asia-northeast3
  GCP_REGION_SHORT: asne3
  REPO_NAME: simple-law-fe
# ❌ Skipped Formatting, Linting, Static Analysis, and Testing steps
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v2
        with:
          node-version: 22.x

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install dependencies
      #   run: npm ci

      # - name: Run tests
      #   run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.SA_KEY }}

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker asia-northeast3-docker.pkg.dev

      - name: Build Docker image
        run: |
          # docker buildx create --use
          docker buildx build \
              --platform=linux/amd64 \
              --cache-from=type=registry,ref=${{ secrets.ARTIFACT_REGISTRY_URL }}/${{ env.REPO_NAME }}:cache \
              --cache-to=type=registry,oci-mediatypes=true,ref=${{ secrets.ARTIFACT_REGISTRY_URL }}/${{ env.REPO_NAME }}:cache,mode=max \
              --provenance=false \
              --tag ${{ secrets.ARTIFACT_REGISTRY_URL }}/${{ env.REPO_NAME }}:${{ env.TAG }} \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --load .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.ARTIFACT_REGISTRY_URL }}/${{ env.REPO_NAME }}:${{ env.TAG }}

  notify:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="Success"
          COLOR=3066993
          if [ "${{ needs.build.result }}" != "success" ]; then
            STATUS="Failure"
            COLOR=15158332
          fi

          BRANCH="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          CREATED_AT=$(date "+%Y/%m/%d %H:%M")
          ACTOR="${{ github.actor }}"
          ACTOR_URL="https://github.com/${ACTOR}.png"
          REPO="${{ github.repository }}"
          
          JSON_PAYLOAD=$(jq -n --arg status "$STATUS" --arg repo "$REPO" --arg branch "$BRANCH" --arg sha "$SHA" --arg actor "$ACTOR" --arg created_at "$CREATED_AT" --arg color "$COLOR" --arg actor_url "$ACTOR_URL" '{
            "embeds": [
              {
                "color": ($color | tonumber),
                "title": "**Build \($status)**",
                "fields": [
                  {"name": "Repository", "value": $repo, "inline": true},
                  {"name": "Branch", "value": $branch, "inline": true},
                  {"name": "SHA", "value": $sha, "inline": false}
                ],
                "footer": {
                  "text": "Created by \($actor) • \($created_at)",
                  "icon_url": $actor_url
                }
              }
            ]
          }')

          curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK_URL"
