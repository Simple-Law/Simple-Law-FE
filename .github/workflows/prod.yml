name: CI configuration

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v2
        with:
          node-version: 22.x

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install dependencies
      #   run: npm ci

      # - name: Run tests
      #   run: npm test

      ###################################################
      # AWS 인증, Docker Image Build & ECR Push
      ###################################################
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
        
      - name: Upload to S3
        run: |
          aws s3 sync build\ s3://${{ env.PROD_S3_BUCKET_NAME }} \
            --delete \
            --cache-control 'public,max-age=31536000'

      - name: Invalidate Cloudfront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      # - name: ECR Login
      #   id: ecr-login
      #   run: |
      #     aws ecr get-login-password --region ap-northeast-2 | \
      #     docker login --username AWS --password-stdin ${{ vars.ECR_URL }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and Push Docker image
      #   run: |
      #     docker buildx build \
      #         --platform=linux/amd64 \
      #         --cache-from=type=registry,ref=${{ vars.ECR_URL }}:cache \
      #         --cache-to=type=registry,oci-mediatypes=true,ref=${{ vars.ECR_URL }}:cache,mode=max \
      #         --provenance=false \
      #         --tag ${{ vars.ECR_URL }}:${{ github.sha }} \
      #         --build-arg BUILDKIT_INLINE_CACHE=1 \
      #         --push .

  notify:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="Success"
          COLOR=3066993
          if [ "${{ needs.build.result }}" != "success" ]; then
            STATUS="Failure"
            COLOR=15158332
          fi

          BRANCH="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          CREATED_AT=$(date "+%Y/%m/%d %H:%M")
          ACTOR="${{ github.actor }}"
          ACTOR_URL="https://github.com/${ACTOR}.png"
          REPO="${{ github.repository }}"
          
          JSON_PAYLOAD=$(jq -n --arg status "$STATUS" --arg repo "$REPO" --arg branch "$BRANCH" --arg sha "$SHA" --arg actor "$ACTOR" --arg created_at "$CREATED_AT" --arg color "$COLOR" --arg actor_url "$ACTOR_URL" '{
            "embeds": [
              {
                "color": ($color | tonumber),
                "title": "**Build \($status)**",
                "fields": [
                  {"name": "Repository", "value": $repo, "inline": true},
                  {"name": "Branch", "value": $branch, "inline": true},
                  {"name": "SHA", "value": $sha, "inline": false}
                ],
                "footer": {
                  "text": "Created by \($actor) • \($created_at)",
                  "icon_url": $actor_url
                }
              }
            ]
          }')

          curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK_URL"
